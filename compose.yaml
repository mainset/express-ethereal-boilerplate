# DOCS: https://docs.docker.com/guides/nodejs/develop/

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  api--express:
    build:
      context: .
      target: production
    # NOTE: start production service by default without {--profile} flag
    profiles: [prod]
    env_file:
      - ./.env
    ports:
      - 3000:3000
    depends_on:
      db-pg--boilerplate:
        condition: service_healthy
    # make the service available under custom domain on local computer
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.server.rule=Host(`express-boilerplate.mainset.${DEV__DOMAIN_LOCALHOST:-localhost}`)"
      - "traefik.http.services.server.loadbalancer.server.port=3000"
    networks:
      - network--dev
  api--express-dev:
    extends: api--express
    build:
      target: development
    env_file:
      - ./.env.development
    volumes:
      - ./src:/usr/src/api-express/src
      - /usr/src/api-express/node_modules
    profiles: [dev]
  db-pg--boilerplate:
    image: postgres
    restart: always
    user: postgres
    volumes:
      - db-pg--boilerplate-data:/var/lib/postgresql/data
    env_file:
      - ./.env.development
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - network--dev
  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - ./.env.development
    ports:
      - "8081:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.mainset.${DEV__DOMAIN_LOCALHOST:-localhost}`)"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
    networks:
      - network--dev

  # development service
  # make the service available under custom domain on local computer
  traefik:
    image: traefik:v2.5
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - network--dev

volumes:
  db-pg--boilerplate-data:

# development
networks:
  network--dev:
